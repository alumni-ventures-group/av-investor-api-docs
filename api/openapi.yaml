openapi: "3.0.1"
info:
  title: "dev-investor-portal-api"
  description: "Api for Investor access methods"
  contact:
    name: "Tony DiTomasso"
    email: "tony@avgfunds.com"
  version: "2021-10-04T16:19:08Z"
servers:
- url: "https://e56bxipr3d.execute-api.us-east-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "/dev"
tags:
- name: "User Methods"
  description: "Services to access and create users"
paths:
  /api/access-token:
    post:
      tags:
      - "User Methods"
      summary: "Create user access token"
      description: "Creates and returns a temporary user access token based on Authorization\
        \ header."
      parameters:
      - name: "Authorization"
        in: "header"
        description: "User session specific token for authorization"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccessTokenResponse"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400JsonResponse"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500JsonResponse"
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403JsonResponse"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/fund-investments:
    get:
      parameters:
      - name: "userid"
        in: "query"
        schema:
          type: "string"
      - name: "fund-code"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "base-fund-code"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/managed-logout:
    get:
      tags:
      - "User Methods"
      summary: "Logout"
      description: "Logout investor user"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "User session specific token for authorization"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/user-tokens:
    get:
      tags:
      - "User Methods"
      summary: "AVRT Tokens"
      description: "Get user tokens total"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "User session specific token for authorization"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400JsonResponse"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500JsonResponse"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTokensResponse"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/managed-login:
    post:
      tags:
      - "User Methods"
      summary: "Login"
      description: "Login managed user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/update-user:
    post:
      tags:
      - "User Methods"
      summary: "Update User"
      description: "Method takes in user information and generates new user in Yii\
        \ database."
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400JsonResponse"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500JsonResponse"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserUpdateResponse"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/reset-password:
    post:
      tags:
      - "User Methods"
      summary: "Reset password"
      description: "Initiates the reset password process for the specified user by\
        \ email if the user exists in the system."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400JsonResponse"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500JsonResponse"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnlySuccessResponse"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/user-messages:
    get:
      parameters:
      - name: "userid"
        in: "query"
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/user-investments:
    get:
      parameters:
      - name: "userid"
        in: "query"
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/login:
    post:
      tags:
      - "User Methods"
      summary: "Login"
      description: "Login investor user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/basecamp-investments:
    get:
      parameters:
      - name: "fund-code"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/dashboard-labels:
    get: {}
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/logout:
    get:
      tags:
      - "User Methods"
      summary: "Logout"
      description: "Logout investor user"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "User session specific token for authorization"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/user:
    get:
      tags:
      - "User Methods"
      summary: "Get User"
      description: "Get user data and confirm authentication"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "User session specific token for authorization"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400JsonResponse"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500JsonResponse"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/user-totals:
    get:
      parameters:
      - name: "userid"
        in: "query"
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/create-user:
    post:
      tags:
      - "User Methods"
      summary: "Create User"
      description: "Method takes in user information and generates new user in Yii\
        \ database."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400JsonResponse"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500JsonResponse"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/verify-access-token:
    get:
      tags:
      - "User Methods"
      summary: "Verify user access token"
      description: "Takes a temporary user access token and verifies that it is valid\
        \ then returns the corresponding user."
      parameters:
      - name: "uat"
        in: "query"
        description: "User access token"
        schema:
          type: "string"
      responses:
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500JsonResponse"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403JsonResponse"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
  /api/update-password:
    post:
      tags:
      - "User Methods"
      summary: "Update User Password"
      description: "Method takes in user's old password, new password, and password\
        \ confirmation and updates the user's password."
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400JsonResponse"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500JsonResponse"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordUpdateResponse"
      security:
      - auth: []
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
components:
  schemas:
    "400JsonResponse":
      type: "object"
      properties:
        message:
          type: "string"
        statusCode:
          type: "number"
    LogoutResponse:
      type: "object"
      properties:
        success:
          type: "boolean"
      description: "Successful logout response object"
    "500JsonResponse":
      type: "object"
      properties:
        message:
          type: "string"
        statusCode:
          type: "number"
    "403JsonResponse":
      type: "object"
      properties:
        message:
          type: "string"
        statusCode:
          type: "number"
    UserTokensResponse:
      type: "object"
      properties:
        tokensTotal:
          type: "number"
      description: "Successful tokens response object"
    UserUpdateResponse:
      type: "object"
      properties:
        success:
          type: "boolean"
        user:
          type: "object"
      description: "Successful user update response object"
    LoginRequest:
      type: "object"
      properties:
        password:
          type: "string"
        email:
          type: "string"
      description: "Payload for login"
    UserAccessTokenResponse:
      type: "object"
      properties:
        accesstoken:
          type: "string"
      description: "Successful access tokens response"
    UserResponse:
      type: "object"
      properties:
        success:
          type: "boolean"
        authToken:
          type: "string"
        links:
          type: "object"
        user:
          type: "object"
      description: "Successful login response object"
    ResetPasswordRequest:
      type: "object"
      properties:
        email:
          type: "string"
      description: "Request payload for reset password"
    UpdatePasswordRequest:
      required:
      - "confirmPassword"
      - "newPassword"
      - "oldPassword"
      type: "object"
      properties:
        oldPassword:
          type: "string"
        newPassword:
          type: "string"
        confirmPassword:
          type: "string"
      description: "Payload for password update"
    CreateUserRequest:
      required:
      - "email"
      - "firstName"
      - "lastName"
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
        email:
          type: "string"
      description: "Request payload for creating user"
    PasswordUpdateResponse:
      type: "object"
      properties:
        success:
          type: "boolean"
        message:
          type: "string"
      description: "Successful password update response object"
    OnlySuccessResponse:
      type: "object"
      properties:
        success:
          type: "boolean"
      description: "Response object with success boolean only"
    UpdateUserRequest:
      required:
      - "id"
      type: "object"
      properties:
        lastName:
          type: "string"
        country:
          type: "string"
        address2:
          type: "string"
        city:
          type: "string"
        address1:
          type: "string"
        homePhone:
          type: "string"
        postalCode:
          type: "string"
        nameSuffix:
          type: "string"
        email2:
          type: "string"
        firstName:
          type: "string"
        email1:
          type: "string"
        province:
          type: "string"
        mobilePhone:
          type: "string"
        k1Consent:
          type: "number"
        middleName:
          type: "string"
        id:
          type: "number"
        state:
          type: "string"
      description: "Request payload for updating user"
  securitySchemes:
    auth:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
